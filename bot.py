import discord
import os
import random
from discord.ext import commands

from keep_alive import keep_alive

keep_alive()

# –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# –ì–ª–æ–±–∞–ª–µ–Ω —Å–ø–∏—Å—ä–∫ –∑–∞ —Å—ä—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä–∞—á–∏—Ç–µ –∏ —Å–∏–ª–∏—Ç–µ –∏–º
players = []
team_a = []
team_b = []

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∏–≥—Ä–∞—á (—Å–µ–≥–∞ —Å–µ –≤—ä–≤–µ–∂–¥–∞ —Å–∞–º–æ –æ–±—â–∞—Ç–∞ —Å–∏–ª–∞)
@bot.command()
async def join(ctx, name: str, total_power: int):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–≥—Ä–∞—á—ä—Ç –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    for player in players:
        if player['name'].lower() == name.lower():
            await ctx.send(f"‚ö†Ô∏è Player **{name}** is already registered!")
            return

    # –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –Ω–∞ –∏–≥—Ä–∞—á–∞
    players.append({
        'name': name,
        'total_power': total_power
    })

    await ctx.send(f"‚úÖ **{name}** successfully registered with **{total_power}M**!")

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞ —Ñ–æ—Ä–º–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç–±–æ—Ä–∏—Ç–µ
@bot.command()
async def teams(ctx):
    global team_a, team_b

    if len(players) < 2:
        await ctx.send("üì≠ Not enough players to form teams.")
        return

    # –°–æ—Ä—Ç–∏—Ä–∞–Ω–µ –ø–æ –æ–±—â–∞ —Å–∏–ª–∞ (–æ—Ç –Ω–∞–π-—Å–∏–ª–µ–Ω –∫—ä–º –Ω–∞–π-—Å–ª–∞–±)
    players_sorted = sorted(players, key=lambda x: x['total_power'], reverse=True)

    team_a, team_b = [], []
    total_a, total_b = 0, 0

    # –†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä–∞—á–∏—Ç–µ –ø–æ –¥–≤–∞ –æ—Ç–±–æ—Ä–∞
    for player in players_sorted:
        if total_a < total_b:
            team_a.append(player)
            total_a += player['total_power']
        else:
            team_b.append(player)
            total_b += player['total_power']

    # –í—ä—Ç—Ä–µ—à–Ω–æ —Å–æ—Ä—Ç–∏—Ä–∞–Ω–µ
    team_a_sorted = sorted(team_a, key=lambda x: x['total_power'], reverse=True)
    team_b_sorted = sorted(team_b, key=lambda x: x['total_power'], reverse=True)

    # –û—Å–Ω–æ–≤–µ–Ω —Å—ä—Å—Ç–∞–≤ –∏ —Ä–µ–∑–µ—Ä–≤–∏
    main_a = team_a_sorted[:20]  
    substitutes_a = team_a_sorted[20:30]

    main_b = team_b_sorted[:20]  
    substitutes_b = team_b_sorted[20:30]

    # –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –æ—Ç–±–æ—Ä–∏—Ç–µ
    await ctx.send("üèÜ **Team distribution:**")

    await ctx.send(f"üü¶ **Team A** (Total power: {total_a}M):")
    await ctx.send(f"**Main (20 Players):**\n" + "\n".join([f"{p['name']} - {p['total_power']}M" for p in main_a]))
    await ctx.send(f"**Subs (10 players):**\n" + "\n".join([f"{p['name']} - {p['total_power']}M" for p in substitutes_a]))

    await ctx.send(f"\nüü• **Team B** (Total power: {total_b}M):")
    await ctx.send(f"**Main (20 Players):**\n" + "\n".join([f"{p['name']} - {p['total_power']}M" for p in main_b]))
    await ctx.send(f"**Subs (10 Players):**\n" + "\n".join([f"{p['name']} - {p['total_power']}M" for p in substitutes_b]))

    await ctx.send(f"‚úÖ Teams have been formed! Use !teamas1, !teamas2, !teamas3, !teambs1, !teambs2, !teambs3 to view them.")

# –§—É–Ω–∫—Ü–∏—è –∑–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –≤—ä—Ç—Ä–µ—à–Ω–∏ –æ—Ç–±–æ—Ä–∏
def create_team_variations(team, team_name):
    variations = {}

    # –í–∑–∏–º–∞–º–µ –¥–≤–∞–º–∞—Ç–∞ –Ω–∞–π-—Å–∏–ª–Ω–∏ –≤ –µ–¥–∏–Ω –≤—ä—Ç—Ä–µ—à–µ–Ω –æ—Ç–±–æ—Ä
    top_two = team[:2]
    remaining_players = team[2:]

    # –†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ 18 –∏–≥—Ä–∞—á–∏ –≤ 9 –æ—Ç–±–æ—Äa —Å –±–∞–ª–∞–Ω—Å–∏—Ä–∞–Ω–∞ —Å–∏–ª–∞
    sub_teams = [[] for _ in range(9)]
    sorted_remaining = sorted(remaining_players, key=lambda x: x['total_power'], reverse=True)

    for i, player in enumerate(sorted_remaining):
        sub_teams[i % 9].append(player)

    # –ë–∞–ª–∞–Ω—Å–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç–±–æ—Ä–∏—Ç–µ —Ç–∞–∫–∞, —á–µ –¥–∞ –∏–º–∞—Ç —Å—Ö–æ–¥–Ω–∞ –æ–±—â–∞ —Å–∏–ª–∞
    for sub_team in sub_teams:
        sub_team.sort(key=lambda x: x['total_power'], reverse=True)

    # –†–∞–∑–±—ä—Ä–∫–≤–∞–Ω–µ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω–∏—Ç–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
    for i in range(1, 4):
        random.shuffle(sub_teams)
        variations[f"{team_name.lower()}s{i}"] = [top_two] + sub_teams

    return variations

# –ö–æ–º–∞–Ω–¥–∏ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –≤—ä—Ç—Ä–µ—à–Ω–∏—Ç–µ –æ—Ç–±–æ—Ä–∏
@bot.command()
async def teamas1(ctx):
    await show_team(ctx, "teama", 1)

@bot.command()
async def teamas2(ctx):
    await show_team(ctx, "teama", 2)

@bot.command()
async def teamas3(ctx):
    await show_team(ctx, "teama", 3)

@bot.command()
async def teambs1(ctx):
    await show_team(ctx, "teamb", 1)

@bot.command()
async def teambs2(ctx):
    await show_team(ctx, "teamb", 2)

@bot.command()
async def teambs3(ctx):
    await show_team(ctx, "teamb", 3)

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –¥–∞–¥–µ–Ω–∞ –≤–∞—Ä–∏–∞—Ü–∏—è –Ω–∞ –æ—Ç–±–æ—Ä
async def show_team(ctx, team_name, variation_number):
    global team_a, team_b

    team = team_a if team_name == "teama" else team_b
    if not team:
        await ctx.send(f"‚ùå {team_name.upper()} has not been formed yet. Use !teams first!")
        return

    team_variation = create_team_variations(team, team_name.upper())[f"{team_name}s{variation_number}"]

    team_message = f"### {team_name.upper()} Strategy {variation_number}\n"
    for i, sub_team in enumerate(team_variation):
        members = ", ".join([f"{p['name']} ({p['total_power']}M)" for p in sub_team])
        team_message += f"**Team {i+1}:** {members}\n"

    await ctx.send(team_message)

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –∏–≥—Ä–∞—á
@bot.command()
async def remove(ctx, name: str):
    global players
    new_players = [player for player in players if player['name'].lower() != name.lower()]

    if len(new_players) == len(players):
        await ctx.send(f"‚ö†Ô∏è Player **{name}** not found!")
    else:
        players = new_players
        await ctx.send(f"üóëÔ∏è Player **{name}** has been removed!")

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç–µ–∫—É—â–∏—Ç–µ –∏–≥—Ä–∞—á–∏
@bot.command()
async def status(ctx):
    if not players:
        await ctx.send("üì≠ No players added.")
        return

    status_message = "### üìã Players:\n"
    for player in players:
        status_message += f"üîπ **{player['name']}** - {player['total_power']}M Main Squad\n"

    await ctx.send(status_message)

# –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –±–æ—Ç–∞
TOKEN = os.getenv("DISCORD_BOT_TOKEN")
if TOKEN is None:
    raise ValueError("DISCORD_BOT_TOKEN environment variable is not set.")

bot.run(TOKEN)